---
alwaysApply: true
---
# Arc: AI Chat Client

## 1. Overview

Arc is a premier, cross-platform AI chat client for desktop (macOS, Windows, Linux), web, and mobile (iOS, Android), designed for a seamless user experience. Our development is guided by these principles:

-   **Web-First, Cross-Platform:** A single Next.js web stack serves as the foundation for all platforms.
-   **Maximum Code Reuse:** A layered architecture shares the vast majority of code, with a thin, platform-specific layer.
-   **Clean Separation of Concerns:** Business logic (core) is strictly separated from the UI and platform code.
-   **Lean & Focused:** We use a minimal, well-defined technology stack to avoid complexity and focus on functionality.

## 2. Architecture

Arc uses a three-layer model to ensure a clean separation of concerns and maximize code reuse.

```
Platform (Web | Electron | Capacitor)
↕
UI Layer (Next.js + shadcn/ui)
↕
Headless Core (TypeScript)
```

-   **Contracts:** Shared TypeScript interfaces and types used across all packages (e.g., `IProvider`, `ImageAttachment`). Zero dependencies, pure type definitions.
-   **Headless Core:** A platform-agnostic TypeScript module containing all business logic, state management, and database schema. It has no UI or Node.js dependencies.
-   **AI Providers:** Independent implementations of AI provider integrations (OpenAI, Anthropic, etc.) that implement the contracts defined in `@arc/contracts`.
-   **UI Layer:** A single Next.js application providing the user interface for all platforms, interacting exclusively with the Headless Core.
-   **Platform Layer:** Provides platform-specific implementations for native functionalities like database access and file system I/O. The Core defines platform-agnostic interfaces (e.g., for SQLite, File System, HTTP) that each platform package implements.

### Technology Stack & Monorepo

-   **UI & Web App:** Next.js 15, shadcn/ui, Tailwind CSS 4
-   **Desktop Wrapper:** Electron 38
-   **Mobile Wrapper:** Capacitor 7
-   **Data Persistence:** SQLite (via platform-specific drivers)
-   **Core Logic:** Pure TypeScript (ESM)
-   **Monorepo Management:** pnpm & Turborepo

The project is a pnpm monorepo with shared configurations (ESLint, TypeScript) at the root to minimize indirection.

```
/
├─ apps/
│  ├─ web/                # Next.js UI
│  ├─ desktop/            # Electron wrapper
│  └─ mobile/             # Capacitor wrapper
│
└─ packages/
   ├─ contracts/          # Shared interfaces (IProvider, etc.)
   ├─ core/               # Headless TS core
   ├─ ai/                 # AI provider implementations (OpenAI, etc.)
   ├─ db/                 # SQLite schema & migrations
   ├─ platform-browser/   # Browser platform implementation
   ├─ platform-electron/  # Electron platform implementation
   └─ platform-capacitor/ # Capacitor platform implementation
```

### Build Strategy

Arc uses a static-first build strategy for maximum portability and performance. The Next.js app is exported as a static site (`output: 'export'`), removing the need for a Node.js server at runtime. Electron and Capacitor apps load these static assets directly.

## 3. Core Features

### Chat Experience

-   **Full Chat Management:** Create, edit, delete, and browse chat history with fast global and per-chat search.
-   **Message Actions:** Stop, regenerate, delete, or fork conversations from any message.
-   **UX Polish:** Auto-saving drafts, auto-generating titles, "thinking" indicators, and one-click copy for code blocks.

### Provider Integration (BYOK)

-   **Multi-provider Support:** Native support for OpenAI, Gemini, Anthropic, and any MCP-compliant server.
-   **Custom Connections:** Override base URLs and headers for proxies.
-   **Connection Management:** Validate keys, check health, and dynamically fetch available models.

> **Note:** We use a minimal, custom HTTP transport layer instead of official SDKs to ensure cross-platform compatibility and a small footprint.

### Rendering & Customization

-   **Rich Text:** Full Markdown support, including Mermaid charts, LaTeX math, and syntax-highlighted code blocks.
-   **Image Support:** Drag-and-drop/paste images, with a built-in, mobile-friendly viewer.
-   **Theming:** Light/dark/system themes, UI localization, and adjustable font sizes.
-   **Performance:** A virtualized message list and robust request streaming ensure a smooth, resilient experience.
-   **Cost Management:** Optional token meter to track usage.

## 4. Development Guide

### UI/UX Philosophy

Our design philosophy is "Feels like ChatGPT, works like a power tool." The UI prioritizes simplicity for new users while making advanced features accessible through progressive disclosure:

-   **Level 1 (Beginner):** A simple, familiar chat interface.
-   **Level 2 (Intermediate):** Contextual actions (copy, regenerate) and basic settings.
-   **Level 3 (Power User):** Advanced features like multi-provider setup and model tuning are in dedicated settings.

### Quality Assurance

We follow the testing pyramid using Vitest, React Testing Library, and Playwright for unit, component, and E2E tests, respectively.

### Important Development Patterns

#### Handling `sql.js` in Next.js (SSR)

**Problem:** The `sql.js` package includes Node.js APIs that fail Next.js server-side builds.

**Solution:** A multi-layered approach is required to prevent `sql.js` from being included in the server-side bundle:

1.  **Isolate the Import:** The module that interacts with `sql.js` (`@arc/platform-browser/src/database/SqlJsDatabase.ts`) must import it dynamically *inside a method*, not at the top level.
2.  **Isolate the Module:** The module containing the dynamic import must **not** be exported from any barrel file (e.g., `packages/platform-browser/src/index.ts`).
3.  **Dynamic Import in Consumer:** The UI-layer code that uses the database module (`apps/web/lib/api/live-chat-api.ts`) must *also* dynamically import it.
4.  **Webpack Fallback (Safety Net):** Configure webpack in `next.config.js` to provide empty fallbacks for Node.js modules like `fs` and `path`.

#### No Barrel Imports

**Problem:** Barrel files (`index.ts`) can break tree-shaking, cause circular dependencies, and obscure the dependency graph.

**Solution:** Strictly avoid barrel files for re-exporting. Always import directly from the source file.

-   **Don't:** `import { ChatService } from '@arc/core';`
-   **Do:** `import { ChatService } from '@arc/core/services/ChatService';`

This discipline is essential for maintaining a clean architecture and preventing bundling issues.
