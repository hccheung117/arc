---
alwaysApply: true
---
# Arc: AI Chat Client

## 1. Vision & Principles

Arc is a premier, cross-platform AI chat client for desktop (macOS, Windows, Linux), web, and mobile (iOS, Android), designed for a seamless user experience.

Our development is guided by these principles:
- **Web-First, Cross-Platform:** A single Next.js web stack serves as the foundation for all platforms.
- **Maximum Code Reuse:** A layered architecture shares the vast majority of code, with a thin, platform-specific layer.
- **Clean Separation of Concerns:** Business logic (core) is strictly separated from the UI and platform code.
- **Lean & Focused:** We use a minimal, well-defined technology stack to avoid complexity and focus on functionality.

## 2. Architecture

Arc uses a three-layer model to ensure a clean separation of concerns and maximize code reuse.

```
Platform (Web | Electron | Capacitor)
↕
UI Layer (Next.js + shadcn/ui)
↕
Headless Core (TypeScript)
```

- **Headless Core:** A platform-agnostic TypeScript module containing all business logic, state management, and database schema. It has no UI or Node.js dependencies.
- **UI Layer:** A single Next.js application providing the user interface for all platforms, interacting exclusively with the Headless Core.
- **Platform Layer:** Provides platform-specific implementations for native functionalities like database access and file system I/O.

### 2.1. Platform Abstraction
The Core defines platform-agnostic interfaces (e.g., for SQLite, File System, HTTP) that each platform package implements. This decouples application logic from the underlying environment.

### 2.2. Technology Stack
- **UI & Web App:** Next.js 15, shadcn/ui, Tailwind CSS 4
- **Desktop Wrapper:** Electron 38
- **Mobile Wrapper:** Capacitor 7
- **Data Persistence:** SQLite (via platform-specific drivers)
- **Core Logic:** Pure TypeScript (ESM)
- **Monorepo Management:** pnpm & Turborepo

### 2.3. Monorepo Structure
The project is a pnpm monorepo. Shared configurations (ESLint, TypeScript) are at the root to minimize indirection.

```
/
├─ apps/
│  ├─ web/                # Next.js UI
│  ├─ desktop/            # Electron wrapper
│  └─ mobile/             # Capacitor wrapper
│
└─ packages/
   ├─ core/               # Headless TS core
   ├─ db/                 # SQLite schema & migrations
   ├─ platform-web/       # Browser platform implementation
   ├─ platform-electron/  # Electron platform implementation
   └─ platform-capacitor/ # Capacitor platform implementation
```

### 2.4. Build Strategy
Arc uses a static-first build strategy for maximum portability and performance. The Next.js app is exported as a static site (`output: 'export'`), removing the need for a Node.js server at runtime. Electron and Capacitor apps load these static assets directly.

## 3. Features

### 3.1. Core Chat Experience
- **Full Chat Management:** Create, edit, delete, and browse chat history with fast global and per-chat search.
- **Message Actions:** Stop, regenerate, delete, or fork conversations from any message.
- **UX Polish:** Auto-saving drafts, auto-generating titles, "thinking" indicators, and one-click copy for code blocks.

### 3.2. Provider Integration (BYOK)
- **Multi-provider Support:** Native support for OpenAI, Gemini, Anthropic, and any MCP-compliant server.
- **Custom Connections:** Override base URLs and headers for proxies.
- **Connection Management:** Validate keys, check health, and dynamically fetch available models.
> **Note:** We use a minimal, custom HTTP transport layer instead of official SDKs to ensure cross-platform compatibility and a small footprint.

### 3.3. Rendering & Attachments
- **Rich Text:** Full Markdown support, including Mermaid charts, LaTeX math, and syntax-highlighted code blocks.
- **Image Support:** Drag-and-drop/paste images, with a built-in, mobile-friendly viewer.

### 3.4. Performance & Customization
- **Resilience:** Robust request streaming with reconnection logic and abort signals.
- **Efficient Rendering:** A virtualized message list ensures smooth performance in long conversations.
- **Theming & Accessibility:** Light/dark/system themes, UI localization, and adjustable font sizes.
- **Cost Management:** Optional token meter to track usage.

## 4. UI/UX Design

### 4.1. Philosophy
"Feels like ChatGPT, works like a power tool." The UI prioritizes simplicity for new users while making advanced features accessible when needed.

### 4.2. Progressive Disclosure
- **Level 1 (Beginner):** A simple, familiar chat interface that works out-of-the-box after a one-time provider setup.
- **Level 2 (Intermediate):** Contextual actions (copy, regenerate) and basic settings (theme, font size) are available on-demand.
- **Level 3 (Power User):** Advanced features like multi-provider setup, preset management, and model parameter tuning are in a dedicated "Advanced Settings" area.

### 4.3. Theming Strategy
- **Centralized & Semantic:** All colors are defined as semantic CSS custom properties (e.g., `--primary`) in `apps/web/app/globals.css`.
- **Theming:** Light and dark themes are supported via a `.dark` class on the `<html>` element.

## 5. Quality Assurance

### 5.1. Testing Strategy
We follow the testing pyramid:
- **Unit Tests:** For isolated logic in the Headless Core.
- **Component Tests:** For UI components in the `web` app.
- **Integration Tests:** For interactions between the Core, UI, and Platform layers.
- **E2E Tests:** For complete user journeys on web, desktop, and mobile.

### 5.2. Tooling
- **Test Runner:** Vitest
- **UI Testing:** React Testing Library
- **E2E Testing:** Playwright